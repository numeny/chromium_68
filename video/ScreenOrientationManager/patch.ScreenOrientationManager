commit 203bdf6761338c0778d9e903198e3a1112aba61c
Author: baidaogui <baidaogui@sogou-inc.com>
Date:   Thu Jan 10 14:47:20 2019 +0800

    Video : add ScreenOrientationManager to manage video's orientation on java
    
    N/A
    
    .
    
    Change-Id: I42df4a26d056de0e25fa6af790cb784a70371839
    Signed-off-by: baidaogui <baidaogui@sogou-inc.com>

diff --git a/sogou_webview/java/src/com/sogou/chromium/player/HTML5VideoClassic.java b/sogou_webview/java/src/com/sogou/chromium/player/HTML5VideoClassic.java
index 61b7c6e..7c94b07 100644
--- a/sogou_webview/java/src/com/sogou/chromium/player/HTML5VideoClassic.java
+++ b/sogou_webview/java/src/com/sogou/chromium/player/HTML5VideoClassic.java
@@ -54,7 +54,9 @@ import org.chromium.ui.base.WindowAndroid;
  * @author chenchen
  */
 public class HTML5VideoClassic extends HTML5VideoView
-    implements ScreenOrientationDelegate, NetworkChangeNotifier.ConnectionTypeObserver {
+    implements ScreenOrientationDelegate,
+    NetworkChangeNotifier.ConnectionTypeObserver,
+    ScreenOrientationManager.ScreenOrientationClient {
     protected static final String LOGTAG = "sogou-video-HTML5VideoClassic";
 
     private static final int SCREEN_ORIENTATION_UNSET = 999;
@@ -316,6 +318,7 @@ public class HTML5VideoClassic extends HTML5VideoView
         }
         mUiControls.didEnterFullscreen();
 
+        /*
         if (mWebPageOrientation != ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR
                 && mWebPageOrientation != ActivityInfo.SCREEN_ORIENTATION_SENSOR
                 && mWebPageOrientation != ActivityInfo.SCREEN_ORIENTATION_FULL_USER
@@ -323,6 +326,7 @@ public class HTML5VideoClassic extends HTML5VideoView
                 && mWebPageOrientation != ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED) {
             onLockChanged(true);
         }
+        */
         if (mProxy != null) {
             mProxy.notifyEnterFullscreen();
         }
@@ -349,7 +353,8 @@ public class HTML5VideoClassic extends HTML5VideoView
         }
     }
 
-    boolean shouldSwitchToLandscapeOnFullscreen() {
+    @Override
+    public boolean shouldSwitchToLandscapeOnFullscreen() {
         return getVideoWidth() > 0
             && getVideoHeight() > 0
             && getVideoWidth() > getVideoHeight();
@@ -379,7 +384,8 @@ public class HTML5VideoClassic extends HTML5VideoView
         MediaLog.d(LOGTAG, "Sogou Video exit full screen, isDetachedFromProxy(): "
                 + isDetachedFromProxy());
         // restore orientation
-        restoreScreenOrientation();
+        ScreenOrientationManager.getInstance().restoreOrientation();
+        // restoreScreenOrientation();
         if (mProxy != null) {
             mProxy.notifyExitFullscreen();
         }
@@ -458,6 +464,8 @@ public class HTML5VideoClassic extends HTML5VideoView
         mTopContentOffsetY = mRenderCoordinates.getContentOffsetYPix();
         mIsFixedPositioned = proxy.isFixedPositioned();
         NetworkChangeNotifier.addConnectionTypeObserver(this);
+        ScreenOrientationManager.getInstance().setScreenOrientationClient(this);
+        ScreenOrientationProvider.setOrientationDelegate(this);
     }
 
     private String getTitle() {
@@ -844,6 +852,7 @@ public class HTML5VideoClassic extends HTML5VideoView
         mSaveSeekTime = getCurrentPosition();
 
         suspendMediaPlayer();
+        ScreenOrientationManager.getInstance().stopOrientationChangeListener();
         boolean isActivityInForeground = Utils.isActivityInForeground(getContext());
         MediaLog.d(LOGTAG, "removing video view, inForeground: "
                 + isActivityInForeground
@@ -886,12 +895,14 @@ public class HTML5VideoClassic extends HTML5VideoView
     // set orientation and start inspecting device orientation change
     // for video which width is bigger than height
     void resumeOrientationIfNeccesary() {
+        /* SOGOU_VIDEO_FIXME
         if (!isFullScreenMode()
                 || !shouldSwitchToLandscapeOnFullscreen()
                 || mProxy == null) {
             return;
         }
         mProxy.lockOrientation();
+        */
     }
 
 
@@ -914,6 +925,11 @@ public class HTML5VideoClassic extends HTML5VideoView
 
         resumeOrientationIfNeccesary();
 
+        if (isFullScreenMode()
+                && shouldSwitchToLandscapeOnFullscreen()) {
+            ScreenOrientationManager.getInstance().setOrientationAndListenChange(false);
+        }
+
         MediaLog.d(LOGTAG, "Sogou Video resumeVideoView");
 
         // video view is removed on pause
@@ -1219,15 +1235,15 @@ public class HTML5VideoClassic extends HTML5VideoView
     // ScreenOrientationDelegate's interface
     @Override
     public boolean canLockOrientation() {
-        return true;
+        return false;
     }
 
     @SuppressLint("WrongConstant")
     private void saveScreenOrientation() {
+        /*
         if (getActivity() == null) {
             return;
         }
-        ScreenOrientationProvider.setOrientationDelegate(this);
 
         MediaLog.d(LOGTAG, "save screen orienatation");
         if (mWebPageOrientation == SCREEN_ORIENTATION_UNSET) {
@@ -1235,10 +1251,12 @@ public class HTML5VideoClassic extends HTML5VideoView
             MediaLog.d(LOGTAG, "save screen orienatation, mWebPageOrientation: "
                     + mWebPageOrientation);
         }
+        */
     }
 
     @SuppressLint("WrongConstant")
     private void restoreScreenOrientation() {
+        /*
         if (getActivity() == null) {
             return;
         }
@@ -1250,6 +1268,7 @@ public class HTML5VideoClassic extends HTML5VideoView
         } else {
             MediaLog.e(LOGTAG, "can't restore screen orienatation!");
         }
+        */
     }
 
     private boolean canEnterFullscreen() {
@@ -1275,7 +1294,9 @@ public class HTML5VideoClassic extends HTML5VideoView
             return;
         }
 
-        saveScreenOrientation();
+        // SOGOU_VIDEO_FIXME
+        // saveScreenOrientation();
+        ScreenOrientationManager.getInstance().setForceOrientation();
 
         enterFullscreenImpl();
     }
@@ -1349,14 +1370,16 @@ public class HTML5VideoClassic extends HTML5VideoView
         if (ac == null || mProxy == null) {
             return;
         }
-        mProxy.onLockStatusChanged(lock);
+        // SOGOU_VIDEO_FIXME mProxy.onLockStatusChanged(lock);
+        ScreenOrientationManager.getInstance().onVideoLockChanged(lock);
     }
 
     private WebView getWebView() {
         return mWebView;
     }
 
-    private Activity getActivity() {
+    @Override
+    public Activity getActivity() {
         Context ctx = getContext();
         if (ctx == null) {
             return null;
@@ -1390,7 +1413,8 @@ public class HTML5VideoClassic extends HTML5VideoView
                     enterFullscreen();
                 } else if (canExitFullscreen(newConfig.orientation)
                         && !isWebviewPaused()) {
-                    mHandler.post(mDelayedExitfullscreen);
+                    // mHandler.post(mDelayedExitfullscreen);
+                    exitFullscreen();
                 }
             }
         };
@@ -1451,6 +1475,7 @@ public class HTML5VideoClassic extends HTML5VideoView
         mHandler.removeCallbacks(mEnterFullscreenAdjustVideoView);
         mHandler.removeCallbacks(mDelayedExitfullscreen);
         NetworkChangeNotifier.removeConnectionTypeObserver(this);
+        ScreenOrientationManager.getInstance().setScreenOrientationClient(null);
         ScreenOrientationProvider.setOrientationDelegate(null);
         setDetachedProxy(null);
         MediaLog.d(LOGTAG, "destroy video view");
diff --git a/sogou_webview/java/src/com/sogou/chromium/player/ScreenOrientationManager.java b/sogou_webview/java/src/com/sogou/chromium/player/ScreenOrientationManager.java
new file mode 100644
index 0000000..04973d7
--- /dev/null
+++ b/sogou_webview/java/src/com/sogou/chromium/player/ScreenOrientationManager.java
@@ -0,0 +1,219 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+// Author: baidaogui@sogou-inc.com.
+
+package com.sogou.chromium.player;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.pm.ActivityInfo;
+import android.os.Handler;
+import android.view.OrientationEventListener;
+import com.sogou.chromium.player.utils.MediaLog;
+
+public class ScreenOrientationManager {
+
+    private static final String LOGTAG = "sogou-video-ScreenOrientationManager";
+
+    public interface ScreenOrientationClient {
+        public Activity getActivity();
+        public boolean isFullScreenMode();
+        public boolean shouldSwitchToLandscapeOnFullscreen();
+    }
+
+    private ScreenOrientationClient mScreenOrientationClient;
+
+    private static int OrientationStateUninited = -999;
+    private int mWebPageOrientationState = OrientationStateUninited;
+
+    private boolean mSwitchedToLandscapeOnFullscreen;
+
+    private boolean mMayChangeOrientation;
+    OrientationEventListener mOrientationListener;
+
+    private static ScreenOrientationManager mInstance;
+
+    private Handler mHandler = new Handler();
+
+    public static ScreenOrientationManager getInstance() {
+        if (mInstance == null) {
+            mInstance = new ScreenOrientationManager();
+        }
+        return mInstance;
+    }
+
+    public void setScreenOrientationClient(
+            ScreenOrientationClient client) {
+        mScreenOrientationClient = client;
+    }
+
+    private ScreenOrientationManager() {
+    }
+
+    @SuppressLint("WrongConstant")
+    public void setForceOrientation() {
+        MediaLog.d(LOGTAG, "setForceOrientation-0");
+        if (isFullScreenMode()) {
+            return;
+        }
+        MediaLog.d(LOGTAG, "setForceOrientation-1");
+        if (mWebPageOrientationState != OrientationStateUninited) {
+            return;
+        }
+        Activity ac = getActivity();
+        if (ac == null) {
+            return;
+        }
+        mWebPageOrientationState = ac.getRequestedOrientation();
+        MediaLog.d(LOGTAG, "setForceOrientation-2, mWebPageOrientationState: " + mWebPageOrientationState);
+        if (shouldSwitchToLandscapeOnFullscreen()) {
+        MediaLog.d(LOGTAG, "setForceOrientation-3, is landscape");
+            mSwitchedToLandscapeOnFullscreen = true;
+            setOrientationAndListenChange(true);
+        } else {
+        MediaLog.d(LOGTAG, "setForceOrientation-3, is not landscape");
+            ac.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+        }
+    }
+
+    @SuppressLint("WrongConstant")
+    public void restoreOrientation() {
+        Activity ac = getActivity();
+        if (ac == null) {
+            return;
+        }
+        MediaLog.d(LOGTAG, "restoreOrientation-0");
+        if (mWebPageOrientationState != OrientationStateUninited) {
+            MediaLog.d(LOGTAG, "restoreOrientation-0-1, mWebPageOrientationState: " + mWebPageOrientationState);
+            ac.setRequestedOrientation(mWebPageOrientationState);
+        }
+        mWebPageOrientationState = OrientationStateUninited;
+        MediaLog.d(LOGTAG, "restoreOrientation-1, stopOrientationChangeListener");
+        stopOrientationChangeListener();
+    }
+
+    public void stopOrientationChangeListener() {
+        MediaLog.d(LOGTAG, "stopOrientationChangeListener-1");
+        if (mOrientationListener != null) {
+            mOrientationListener.disable();
+        }
+        mHandler.removeCallbacks(mRunnableWillExitfullscreen);
+        mMayChangeOrientation = false;
+    }
+
+    // set orientation and listen to orientation change,
+    // only for video which width is bigger than height
+    public void setOrientationAndListenChange(boolean createListenerIfNone) {
+        Activity ac = getActivity();
+        if (ac == null) {
+            return;
+        }
+        if (!shouldSwitchToLandscapeOnFullscreen()) {
+            return;
+        }
+        MediaLog.d(LOGTAG, "setOrientationAndListenChange");
+        ac.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
+        startOrientationChangeListener(createListenerIfNone);
+    }
+
+    private void startOrientationChangeListener(boolean createIfNone) {
+        Activity ac = getActivity();
+        if (ac == null) {
+            return;
+        }
+
+        if (mOrientationListener == null && createIfNone) {
+            mOrientationListener = new OrientationEventListener(ac) {
+                @Override
+                public void onOrientationChanged(int rotation) {
+                    /*
+                       MediaLog.d(LOGTAG, "onOrientationChanged-1"
+                       + ", rotation: " + rotation);
+                     */
+                    if (((rotation >= 0) && (rotation <= 45))
+                            || (rotation >= 315)
+                            || ((rotation >= 135) && (rotation <= 225))) { //portrait
+                        /*
+                           MediaLog.d(LOGTAG, "onOrientationChanged-1-1"
+                           + ", rotation: " + rotation);
+                         */
+                        mMayChangeOrientation = false;
+                    } else if (((rotation > 60) && (rotation < 120))
+                            || ((rotation > 240) && (rotation < 300))) { //landscape
+                        /*
+                           MediaLog.d(LOGTAG, "onOrientationChanged-1-2"
+                           + ", rotation: " + rotation);
+                         */
+                        if (mMayChangeOrientation) {
+                            return;
+                        }
+                        /*
+                           MediaLog.d(LOGTAG, "onOrientationChanged-1-2-1"
+                           + ", rotation: " + rotation);
+                         */
+                        mMayChangeOrientation = true;
+                        mHandler.removeCallbacks(mRunnableWillExitfullscreen);
+                        mHandler.postDelayed(mRunnableWillExitfullscreen, 500);
+                    }
+                }
+            };
+        }
+        if (mOrientationListener != null) {
+            mOrientationListener.enable();
+        }
+    }
+
+    public void onVideoLockChanged(boolean lock) {
+        if (!isFullScreenMode()) {
+            return;
+        }
+
+        Activity ac = getActivity();
+        if (ac == null) {
+            return;
+        }
+
+        if (lock && shouldSwitchToLandscapeOnFullscreen()) {
+            ac.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
+            stopOrientationChangeListener();
+        } else if (lock) {
+            ac.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+        } else if (shouldSwitchToLandscapeOnFullscreen()) {
+            // unlock
+            setOrientationAndListenChange(false);
+        }
+    }
+
+    private final Runnable mRunnableWillExitfullscreen= new Runnable() {
+        @Override
+        public void run() {
+            // for bug #1321756, this runnable avoids
+            // switching to exit fullscreen when shake mobile
+            MediaLog.d(LOGTAG, "mRunnableWillExitfullscreen-0, mMayChangeOrientation: "
+                    + mMayChangeOrientation
+                    + ", mOrientationListener: " + mOrientationListener);
+            Activity ac = getActivity();
+            if (ac == null
+                    || !mMayChangeOrientation
+                    || mOrientationListener == null) {
+                return;
+            }
+            MediaLog.d(LOGTAG, "mRunnableWillExitfullscreen-1, setRequestedOrientation");
+            ac.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
+            mOrientationListener.disable();
+        }
+    };
+
+    private Activity getActivity() {
+        return mScreenOrientationClient != null ? mScreenOrientationClient.getActivity() : null;
+    }
+    private boolean isFullScreenMode() {
+        return mScreenOrientationClient != null
+            && mScreenOrientationClient.isFullScreenMode();
+    }
+    private boolean shouldSwitchToLandscapeOnFullscreen() {
+        return mScreenOrientationClient != null
+            && mScreenOrientationClient.shouldSwitchToLandscapeOnFullscreen();
+    }
+}
diff --git a/sogou_webview/java_resources.gni b/sogou_webview/java_resources.gni
index f74af25..1dd07ef 100644
--- a/sogou_webview/java_resources.gni
+++ b/sogou_webview/java_resources.gni
@@ -90,6 +90,7 @@ mediaplayer_java_sources = [
   "java/src/com/sogou/chromium/player/HTML5VideoView.java",
   "java/src/com/sogou/chromium/player/HTML5VideoViewProxy.java",
   "java/src/com/sogou/chromium/player/MediaPlayer.java",
+  "java/src/com/sogou/chromium/player/ScreenOrientationManager.java",
   "java/src/com/sogou/chromium/player/SwVideoDelegate.java",
   "java/src/com/sogou/chromium/player/VideoPingbackManager.java",
   "java/src/com/sogou/chromium/player/VideoUrlManager.java",
